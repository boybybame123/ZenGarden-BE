// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ZenGarden.Data.Models;

#nullable disable

namespace ZenGarden.Data.Migrations
{
    [DbContext(typeof(zengardenContext))]
    partial class zengardenContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("ZenGarden.Data.Models.Bag", b =>
                {
                    b.Property<int>("BagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BagID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("BagId"));

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("UpdatedAt"));

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("BagId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "idx_bag_user");

                    b.ToTable("bag", (string)null);
                });

            modelBuilder.Entity("ZenGarden.Data.Models.Bagitem", b =>
                {
                    b.Property<int>("BagItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BagItemID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("BagItemId"));

                    b.Property<DateTime?>("AddedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("BagId")
                        .HasColumnType("int")
                        .HasColumnName("BagID");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("ItemID");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("BagItemId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "BagId" }, "BagID");

                    b.HasIndex(new[] { "ItemId" }, "ItemID");

                    b.ToTable("bagitem", (string)null);
                });

            modelBuilder.Entity("ZenGarden.Data.Models.Dailyreward", b =>
                {
                    b.Property<int>("DailyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DailyID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("DailyId"));

                    b.Property<string>("ConditionType")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ConditionValue")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("Day")
                        .HasColumnType("int");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("ItemID");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Reward")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RewardType")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("DailyId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ItemId" }, "ItemID")
                        .HasDatabaseName("ItemID1");

                    b.ToTable("dailyreward", (string)null);
                });

            modelBuilder.Entity("ZenGarden.Data.Models.Dailyrewardclaim", b =>
                {
                    b.Property<int>("ClaimId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClaimID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ClaimId"));

                    b.Property<DateTime?>("ClaimedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("DailyId")
                        .HasColumnType("int")
                        .HasColumnName("DailyID");

                    b.Property<int?>("TaskId")
                        .HasColumnType("int")
                        .HasColumnName("TaskID");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("ClaimId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "TaskId" }, "TaskID");

                    b.HasIndex(new[] { "UserId" }, "idx_daily_reward_claim_user");

                    b.ToTable("dailyrewardclaim", (string)null);
                });

            modelBuilder.Entity("ZenGarden.Data.Models.Deposittransaction", b =>
                {
                    b.Property<int>("DepositId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DepositID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("DepositId"));

                    b.Property<decimal?>("Amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("CompletedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("CompletedAt"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PaymentStatus")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("TransactionReference")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("DepositId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "UserID");

                    b.ToTable("deposittransaction", (string)null);
                });

            modelBuilder.Entity("ZenGarden.Data.Models.Focusmethod", b =>
                {
                    b.Property<int>("FocusMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FocusMethodID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("FocusMethodId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("DefaultBreak")
                        .HasColumnType("int");

                    b.Property<int?>("DefaultDuration")
                        .HasColumnType("int");

                    b.Property<int?>("MaxBreak")
                        .HasColumnType("int");

                    b.Property<int?>("MaxDuration")
                        .HasColumnType("int");

                    b.Property<int?>("MinBreak")
                        .HasColumnType("int");

                    b.Property<int?>("MinDuration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("FocusMethodId")
                        .HasName("PRIMARY");

                    b.ToTable("focusmethod", (string)null);
                });

            modelBuilder.Entity("ZenGarden.Data.Models.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ItemID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ItemId"));

                    b.Property<decimal?>("Cost")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool?>("Limited")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Rarity")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ItemId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Type", "Rarity" }, "idx_item_type_rarity");

                    b.ToTable("item", (string)null);
                });

            modelBuilder.Entity("ZenGarden.Data.Models.Itemdetail", b =>
                {
                    b.Property<int>("ItemDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ItemDetailID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ItemDetailId"));

                    b.Property<int?>("Cooldown")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("DurationType")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("ItemID");

                    b.Property<int?>("MaxStack")
                        .HasColumnType("int");

                    b.Property<string>("Requirements")
                        .HasColumnType("json");

                    b.Property<string>("SpecialEffects")
                        .HasColumnType("text");

                    b.Property<string>("Stats")
                        .HasColumnType("json");

                    b.Property<string>("Tags")
                        .HasColumnType("json");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("UpdatedAt"));

                    b.HasKey("ItemDetailId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ItemId" }, "idx_item_detail_itemid")
                        .IsUnique();

                    b.ToTable("itemdetail", (string)null);
                });

            modelBuilder.Entity("ZenGarden.Data.Models.Leaderboard", b =>
                {
                    b.Property<int>("LeaderboardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LeaderboardID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("LeaderboardId"));

                    b.Property<int?>("BestTrees")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("LastUpdated"));

                    b.Property<int?>("ProductivityScore")
                        .HasColumnType("int");

                    b.Property<int?>("TotalTrees")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("LeaderboardId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "UserID")
                        .HasDatabaseName("UserID1");

                    b.ToTable("leaderboard", (string)null);
                });

            modelBuilder.Entity("ZenGarden.Data.Models.Purchasehistory", b =>
                {
                    b.Property<int>("PurchaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PurchaseID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PurchaseId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("ItemID");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<decimal?>("TotalPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("PurchaseId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ItemId" }, "ItemID")
                        .HasDatabaseName("ItemID2");

                    b.HasIndex(new[] { "UserId" }, "UserID")
                        .HasDatabaseName("UserID2");

                    b.ToTable("purchasehistory", (string)null);
                });

            modelBuilder.Entity("ZenGarden.Data.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("RoleId")
                        .HasName("PRIMARY");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("ZenGarden.Data.Models.Task", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TaskID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TaskId"));

                    b.Property<string>("AiprocessedDescription")
                        .HasColumnType("text")
                        .HasColumnName("AIProcessedDescription");

                    b.Property<DateTime?>("CompletedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("CompletedAt"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.Property<string>("TaskDescription")
                        .HasColumnType("text");

                    b.Property<string>("TaskName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("TimeOverdue")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<int?>("Xpreward")
                        .HasColumnType("int")
                        .HasColumnName("XPReward");

                    b.HasKey("TaskId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "StatusId" }, "StatusID");

                    b.HasIndex(new[] { "UserId" }, "idx_task_user");

                    b.ToTable("task", (string)null);
                });

            modelBuilder.Entity("ZenGarden.Data.Models.Taskstatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<string>("StatusName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("StatusId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "StatusName" }, "StatusName")
                        .IsUnique();

                    b.ToTable("taskstatus", (string)null);
                });

            modelBuilder.Entity("ZenGarden.Data.Models.Tradehistory", b =>
                {
                    b.Property<int>("TradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TradeID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TradeId"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("RequestedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.Property<decimal?>("TradeFee")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValueSql("'0.00'");

                    b.Property<int?>("UserAid")
                        .HasColumnType("int")
                        .HasColumnName("UserAID");

                    b.Property<int?>("UserBid")
                        .HasColumnType("int")
                        .HasColumnName("UserBID");

                    b.Property<int?>("UserTreeAid")
                        .HasColumnType("int")
                        .HasColumnName("UserTreeAID");

                    b.Property<int?>("UserTreeBid")
                        .HasColumnType("int")
                        .HasColumnName("UserTreeBID");

                    b.HasKey("TradeId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserBid" }, "UserBID");

                    b.HasIndex(new[] { "UserTreeAid" }, "UserTreeAID");

                    b.HasIndex(new[] { "UserTreeBid" }, "UserTreeBID");

                    b.HasIndex(new[] { "StatusId" }, "idx_tradehistory_statusid");

                    b.HasIndex(new[] { "UserAid", "UserBid" }, "idx_tradehistory_user");

                    b.ToTable("tradehistory", (string)null);
                });

            modelBuilder.Entity("ZenGarden.Data.Models.Tradestatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<string>("StatusName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("StatusId")
                        .HasName("PRIMARY");

                    b.ToTable("tradestatus", (string)null);
                });

            modelBuilder.Entity("ZenGarden.Data.Models.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TransactionID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<decimal?>("Amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("CommissionFee")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("TransactionType")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<int?>("WalletId")
                        .HasColumnType("int")
                        .HasColumnName("WalletID");

                    b.HasKey("TransactionId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "WalletId" }, "WalletID");

                    b.HasIndex(new[] { "Status" }, "idx_transaction_status");

                    b.HasIndex(new[] { "UserId" }, "idx_transaction_user");

                    b.ToTable("transactions", (string)null);
                });

            modelBuilder.Entity("ZenGarden.Data.Models.Treeprogress", b =>
                {
                    b.Property<int>("ProgressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProgressID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ProgressId"));

                    b.Property<int?>("MaxTreesPerPeriod")
                        .HasColumnType("int");

                    b.Property<string>("PeriodType")
                        .HasColumnType("enum('Daily','Weekly','Monthly')");

                    b.Property<int?>("UserTreeId")
                        .HasColumnType("int")
                        .HasColumnName("UserTreeID");

                    b.Property<int?>("Xprequired")
                        .HasColumnType("int")
                        .HasColumnName("XPRequired");

                    b.HasKey("ProgressId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserTreeId" }, "UserTreeID");

                    b.ToTable("treeprogress", (string)null);
                });

            modelBuilder.Entity("ZenGarden.Data.Models.Treetype", b =>
                {
                    b.Property<int>("TreeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TreeTypeID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TreeTypeId"));

                    b.Property<decimal?>("BasePrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Rarity")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("TreeTypeId")
                        .HasName("PRIMARY");

                    b.ToTable("treetype", (string)null);
                });

            modelBuilder.Entity("ZenGarden.Data.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("UpdatedAt"));

                    b.HasKey("UserId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Email" }, "Email")
                        .IsUnique();

                    b.HasIndex(new[] { "RoleId" }, "RoleID");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("ZenGarden.Data.Models.Useractivity", b =>
                {
                    b.Property<int>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ActivityID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ActivityId"));

                    b.Property<int?>("ActiveTime")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp");

                    b.Property<int?>("FocusMethodId")
                        .HasColumnType("int")
                        .HasColumnName("FocusMethodID");

                    b.Property<int?>("FocusScore")
                        .HasColumnType("int");

                    b.Property<int?>("InactiveTime")
                        .HasColumnType("int");

                    b.Property<int?>("Interruptions")
                        .HasColumnType("int");

                    b.Property<int?>("Keystrokes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("MouseClicks")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("MouseScrolls")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("timestamp");

                    b.Property<int?>("SuggestedBreak")
                        .HasColumnType("int");

                    b.Property<int?>("SuggestedDuration")
                        .HasColumnType("int");

                    b.Property<int?>("TaskId")
                        .HasColumnType("int")
                        .HasColumnName("TaskID");

                    b.Property<int?>("UserAdjustedBreak")
                        .HasColumnType("int");

                    b.Property<int?>("UserAdjustedDuration")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<int?>("WarningSpent")
                        .HasColumnType("int");

                    b.HasKey("ActivityId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "FocusMethodId" }, "FocusMethodID");

                    b.HasIndex(new[] { "TaskId" }, "TaskID")
                        .HasDatabaseName("TaskID1");

                    b.HasIndex(new[] { "UserId" }, "idx_user_activity_user");

                    b.ToTable("useractivity", (string)null);
                });

            modelBuilder.Entity("ZenGarden.Data.Models.Userexperience", b =>
                {
                    b.Property<int>("UserExperienceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserExperienceID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserExperienceId"));

                    b.Property<int?>("PreviousLevel")
                        .HasColumnType("int");

                    b.Property<long?>("TotalXp")
                        .HasColumnType("bigint")
                        .HasColumnName("TotalXP");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("UpdatedAt"));

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<int?>("XptoNextLevel")
                        .HasColumnType("int")
                        .HasColumnName("XPToNextLevel");

                    b.HasKey("UserExperienceId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "UserID")
                        .HasDatabaseName("UserID3");

                    b.ToTable("userexperience", (string)null);
                });

            modelBuilder.Entity("ZenGarden.Data.Models.Usertree", b =>
                {
                    b.Property<int>("UserTreeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserTreeID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserTreeId"));

                    b.Property<int?>("FinalTreeId")
                        .HasColumnType("int")
                        .HasColumnName("FinalTreeID");

                    b.Property<string>("FinalTreeRarity")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("LastUpdated"));

                    b.Property<DateTime?>("PlantedAt")
                        .HasColumnType("timestamp");

                    b.Property<int?>("TreeLevel")
                        .HasColumnType("int");

                    b.Property<string>("TreeStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('Growing','Mature','MaxLevel')")
                        .HasDefaultValueSql("'Growing'");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<int?>("Xp")
                        .HasColumnType("int")
                        .HasColumnName("XP");

                    b.HasKey("UserTreeId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "FinalTreeId" }, "FinalTreeID");

                    b.HasIndex(new[] { "UserId" }, "UserID")
                        .HasDatabaseName("UserID4");

                    b.ToTable("usertree", (string)null);
                });

            modelBuilder.Entity("ZenGarden.Data.Models.Wallet", b =>
                {
                    b.Property<int>("WalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WalletID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("WalletId"));

                    b.Property<decimal?>("Balance")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValueSql("'0.00'");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("UpdatedAt"));

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("WalletId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "UserID")
                        .HasDatabaseName("UserID5");

                    b.ToTable("wallet", (string)null);
                });

            modelBuilder.Entity("ZenGarden.Data.Models.Workspace", b =>
                {
                    b.Property<int>("WorkspaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WorkspaceID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("WorkspaceId"));

                    b.Property<string>("Configuration")
                        .HasColumnType("json");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime?>("UpdatedAt"));

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("WorkspaceId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "UserID")
                        .HasDatabaseName("UserID6");

                    b.ToTable("workspace", (string)null);
                });

            modelBuilder.Entity("ZenGarden.Data.Models.Workspaceitem", b =>
                {
                    b.Property<int>("WorkspaceItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WorkspaceItemID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("WorkspaceItemId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Effect")
                        .HasColumnType("json");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("ItemID");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<int?>("WorkspaceId")
                        .HasColumnType("int")
                        .HasColumnName("WorkspaceID");

                    b.HasKey("WorkspaceItemId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ItemId" }, "ItemID")
                        .HasDatabaseName("ItemID3");

                    b.HasIndex(new[] { "WorkspaceId" }, "WorkspaceID");

                    b.HasIndex(new[] { "UserId" }, "idx_workspace_item_user");

                    b.ToTable("workspaceitem", (string)null);
                });

            modelBuilder.Entity("ZenGarden.Data.Models.Bag", b =>
                {
                    b.HasOne("ZenGarden.Data.Models.User", "User")
                        .WithMany("Bags")
                        .HasForeignKey("UserId")
                        .HasConstraintName("bag_ibfk_1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZenGarden.Data.Models.Bagitem", b =>
                {
                    b.HasOne("ZenGarden.Data.Models.Bag", "Bag")
                        .WithMany("Bagitems")
                        .HasForeignKey("BagId")
                        .HasConstraintName("bagitem_ibfk_1");

                    b.HasOne("ZenGarden.Data.Models.Item", "Item")
                        .WithMany("Bagitems")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("bagitem_ibfk_2");

                    b.Navigation("Bag");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("ZenGarden.Data.Models.Dailyreward", b =>
                {
                    b.HasOne("ZenGarden.Data.Models.Item", "Item")
                        .WithMany("Dailyrewards")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("dailyreward_ibfk_1");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("ZenGarden.Data.Models.Dailyrewardclaim", b =>
                {
                    b.HasOne("ZenGarden.Data.Models.Task", "Task")
                        .WithMany("Dailyrewardclaims")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("dailyrewardclaim_ibfk_2");

                    b.HasOne("ZenGarden.Data.Models.User", "User")
                        .WithMany("Dailyrewardclaims")
                        .HasForeignKey("UserId")
                        .HasConstraintName("dailyrewardclaim_ibfk_1");

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZenGarden.Data.Models.Deposittransaction", b =>
                {
                    b.HasOne("ZenGarden.Data.Models.User", "User")
                        .WithMany("Deposittransactions")
                        .HasForeignKey("UserId")
                        .HasConstraintName("deposittransaction_ibfk_1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZenGarden.Data.Models.Itemdetail", b =>
                {
                    b.HasOne("ZenGarden.Data.Models.Item", "Item")
                        .WithOne("Itemdetail")
                        .HasForeignKey("ZenGarden.Data.Models.Itemdetail", "ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("itemdetail_ibfk_1");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("ZenGarden.Data.Models.Leaderboard", b =>
                {
                    b.HasOne("ZenGarden.Data.Models.User", "User")
                        .WithMany("Leaderboards")
                        .HasForeignKey("UserId")
                        .HasConstraintName("leaderboard_ibfk_1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZenGarden.Data.Models.Purchasehistory", b =>
                {
                    b.HasOne("ZenGarden.Data.Models.Item", "Item")
                        .WithMany("Purchasehistories")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("purchasehistory_ibfk_2");

                    b.HasOne("ZenGarden.Data.Models.User", "User")
                        .WithMany("Purchasehistories")
                        .HasForeignKey("UserId")
                        .HasConstraintName("purchasehistory_ibfk_1");

                    b.Navigation("Item");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZenGarden.Data.Models.Task", b =>
                {
                    b.HasOne("ZenGarden.Data.Models.Taskstatus", "Status")
                        .WithMany("Tasks")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("task_ibfk_2");

                    b.HasOne("ZenGarden.Data.Models.User", "User")
                        .WithMany("Tasks")
                        .HasForeignKey("UserId")
                        .HasConstraintName("task_ibfk_1");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZenGarden.Data.Models.Tradehistory", b =>
                {
                    b.HasOne("ZenGarden.Data.Models.Tradestatus", "Status")
                        .WithMany("Tradehistories")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("tradehistory_ibfk_5");

                    b.HasOne("ZenGarden.Data.Models.User", "UserA")
                        .WithMany("TradehistoryUserAs")
                        .HasForeignKey("UserAid")
                        .HasConstraintName("tradehistory_ibfk_1");

                    b.HasOne("ZenGarden.Data.Models.User", "UserB")
                        .WithMany("TradehistoryUserBs")
                        .HasForeignKey("UserBid")
                        .HasConstraintName("tradehistory_ibfk_2");

                    b.HasOne("ZenGarden.Data.Models.Usertree", "UserTreeA")
                        .WithMany("TradehistoryUserTreeAs")
                        .HasForeignKey("UserTreeAid")
                        .HasConstraintName("tradehistory_ibfk_3");

                    b.HasOne("ZenGarden.Data.Models.Usertree", "UserTreeB")
                        .WithMany("TradehistoryUserTreeBs")
                        .HasForeignKey("UserTreeBid")
                        .HasConstraintName("tradehistory_ibfk_4");

                    b.Navigation("Status");

                    b.Navigation("UserA");

                    b.Navigation("UserB");

                    b.Navigation("UserTreeA");

                    b.Navigation("UserTreeB");
                });

            modelBuilder.Entity("ZenGarden.Data.Models.Transaction", b =>
                {
                    b.HasOne("ZenGarden.Data.Models.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .HasConstraintName("transactions_ibfk_1");

                    b.HasOne("ZenGarden.Data.Models.Wallet", "Wallet")
                        .WithMany("Transactions")
                        .HasForeignKey("WalletId")
                        .HasConstraintName("transactions_ibfk_2");

                    b.Navigation("User");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("ZenGarden.Data.Models.Treeprogress", b =>
                {
                    b.HasOne("ZenGarden.Data.Models.Usertree", "UserTree")
                        .WithMany("Treeprogresses")
                        .HasForeignKey("UserTreeId")
                        .HasConstraintName("treeprogress_ibfk_1");

                    b.Navigation("UserTree");
                });

            modelBuilder.Entity("ZenGarden.Data.Models.User", b =>
                {
                    b.HasOne("ZenGarden.Data.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("users_ibfk_1");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ZenGarden.Data.Models.Useractivity", b =>
                {
                    b.HasOne("ZenGarden.Data.Models.Focusmethod", "FocusMethod")
                        .WithMany("Useractivities")
                        .HasForeignKey("FocusMethodId")
                        .HasConstraintName("useractivity_ibfk_2");

                    b.HasOne("ZenGarden.Data.Models.Task", "Task")
                        .WithMany("Useractivities")
                        .HasForeignKey("TaskId")
                        .HasConstraintName("useractivity_ibfk_3");

                    b.HasOne("ZenGarden.Data.Models.User", "User")
                        .WithMany("Useractivities")
                        .HasForeignKey("UserId")
                        .HasConstraintName("useractivity_ibfk_1");

                    b.Navigation("FocusMethod");

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZenGarden.Data.Models.Userexperience", b =>
                {
                    b.HasOne("ZenGarden.Data.Models.User", "User")
                        .WithMany("Userexperiences")
                        .HasForeignKey("UserId")
                        .HasConstraintName("userexperience_ibfk_1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZenGarden.Data.Models.Usertree", b =>
                {
                    b.HasOne("ZenGarden.Data.Models.Treetype", "FinalTree")
                        .WithMany("Usertrees")
                        .HasForeignKey("FinalTreeId")
                        .HasConstraintName("usertree_ibfk_2");

                    b.HasOne("ZenGarden.Data.Models.User", "User")
                        .WithMany("Usertrees")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("usertree_ibfk_1");

                    b.Navigation("FinalTree");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZenGarden.Data.Models.Wallet", b =>
                {
                    b.HasOne("ZenGarden.Data.Models.User", "User")
                        .WithMany("Wallets")
                        .HasForeignKey("UserId")
                        .HasConstraintName("wallet_ibfk_1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZenGarden.Data.Models.Workspace", b =>
                {
                    b.HasOne("ZenGarden.Data.Models.User", "User")
                        .WithMany("Workspaces")
                        .HasForeignKey("UserId")
                        .HasConstraintName("workspace_ibfk_1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZenGarden.Data.Models.Workspaceitem", b =>
                {
                    b.HasOne("ZenGarden.Data.Models.Item", "Item")
                        .WithMany("Workspaceitems")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("workspaceitem_ibfk_2");

                    b.HasOne("ZenGarden.Data.Models.User", "User")
                        .WithMany("Workspaceitems")
                        .HasForeignKey("UserId")
                        .HasConstraintName("workspaceitem_ibfk_3");

                    b.HasOne("ZenGarden.Data.Models.Workspace", "Workspace")
                        .WithMany("Workspaceitems")
                        .HasForeignKey("WorkspaceId")
                        .HasConstraintName("workspaceitem_ibfk_1");

                    b.Navigation("Item");

                    b.Navigation("User");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("ZenGarden.Data.Models.Bag", b =>
                {
                    b.Navigation("Bagitems");
                });

            modelBuilder.Entity("ZenGarden.Data.Models.Focusmethod", b =>
                {
                    b.Navigation("Useractivities");
                });

            modelBuilder.Entity("ZenGarden.Data.Models.Item", b =>
                {
                    b.Navigation("Bagitems");

                    b.Navigation("Dailyrewards");

                    b.Navigation("Itemdetail");

                    b.Navigation("Purchasehistories");

                    b.Navigation("Workspaceitems");
                });

            modelBuilder.Entity("ZenGarden.Data.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ZenGarden.Data.Models.Task", b =>
                {
                    b.Navigation("Dailyrewardclaims");

                    b.Navigation("Useractivities");
                });

            modelBuilder.Entity("ZenGarden.Data.Models.Taskstatus", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("ZenGarden.Data.Models.Tradestatus", b =>
                {
                    b.Navigation("Tradehistories");
                });

            modelBuilder.Entity("ZenGarden.Data.Models.Treetype", b =>
                {
                    b.Navigation("Usertrees");
                });

            modelBuilder.Entity("ZenGarden.Data.Models.User", b =>
                {
                    b.Navigation("Bags");

                    b.Navigation("Dailyrewardclaims");

                    b.Navigation("Deposittransactions");

                    b.Navigation("Leaderboards");

                    b.Navigation("Purchasehistories");

                    b.Navigation("Tasks");

                    b.Navigation("TradehistoryUserAs");

                    b.Navigation("TradehistoryUserBs");

                    b.Navigation("Transactions");

                    b.Navigation("Useractivities");

                    b.Navigation("Userexperiences");

                    b.Navigation("Usertrees");

                    b.Navigation("Wallets");

                    b.Navigation("Workspaceitems");

                    b.Navigation("Workspaces");
                });

            modelBuilder.Entity("ZenGarden.Data.Models.Usertree", b =>
                {
                    b.Navigation("TradehistoryUserTreeAs");

                    b.Navigation("TradehistoryUserTreeBs");

                    b.Navigation("Treeprogresses");
                });

            modelBuilder.Entity("ZenGarden.Data.Models.Wallet", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("ZenGarden.Data.Models.Workspace", b =>
                {
                    b.Navigation("Workspaceitems");
                });
#pragma warning restore 612, 618
        }
    }
}
