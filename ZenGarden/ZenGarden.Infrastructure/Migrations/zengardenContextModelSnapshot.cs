// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ZenGarden.Infrastructure.Persistence;

#nullable disable

namespace ZenGarden.Infrastructure.Migrations
{
    [DbContext(typeof(ZenGardenContext))]
    partial class ZenGardenContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("ZenGarden.Domain.Entities.Bag", b =>
                {
                    b.Property<int>("BagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BagID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("BagId"));

                    b.Property<int?>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("BagId")
                        .HasName("PRIMARY");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Bag");
                });

            modelBuilder.Entity("ZenGarden.Domain.Entities.BagItem", b =>
                {
                    b.Property<int>("BagItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BagItemID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("BagItemId"));

                    b.Property<int?>("BagId")
                        .HasColumnType("int")
                        .HasColumnName("BagID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("ItemID");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("BagItemId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "BagId" }, "BagID");

                    b.HasIndex(new[] { "ItemId" }, "ItemID");

                    b.ToTable("BagItem");
                });

            modelBuilder.Entity("ZenGarden.Domain.Entities.Challenge", b =>
                {
                    b.Property<int>("ChallengeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ChallengeID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ChallengeId"));

                    b.Property<string>("ChallengeDescription")
                        .HasColumnType("text");

                    b.Property<string>("ChallengeName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("ChallengeTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ChallengeTypeID");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP");

                    b.Property<int>("XpReward")
                        .HasColumnType("int");

                    b.HasKey("ChallengeId")
                        .HasName("PRIMARY");

                    b.HasIndex("ChallengeTypeId");

                    b.ToTable("Challenge");
                });

            modelBuilder.Entity("ZenGarden.Domain.Entities.ChallengeTask", b =>
                {
                    b.Property<int>("ChallengeTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ChallengeTaskID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ChallengeTaskId"));

                    b.Property<int>("ChallengeId")
                        .HasColumnType("int")
                        .HasColumnName("ChallengeID");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("TaskId")
                        .HasColumnType("int")
                        .HasColumnName("TaskID");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP");

                    b.HasKey("ChallengeTaskId")
                        .HasName("PRIMARY");

                    b.HasIndex("ChallengeId");

                    b.HasIndex("TaskId");

                    b.ToTable("ChallengeTask");
                });

            modelBuilder.Entity("ZenGarden.Domain.Entities.ChallengeType", b =>
                {
                    b.Property<int>("ChallengeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ChallengeTypeID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ChallengeTypeId"));

                    b.Property<string>("ChallengeTypeName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ChallengeTypeName");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP");

                    b.HasKey("ChallengeTypeId")
                        .HasName("PK_ChallengeType");

                    b.ToTable("ChallengeType");
                });

            modelBuilder.Entity("ZenGarden.Domain.Entities.FocusMethod", b =>
                {
                    b.Property<int>("FocusMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FocusMethodID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("FocusMethodId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("DefaultBreak")
                        .HasColumnType("int");

                    b.Property<int?>("DefaultDuration")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("MaxBreak")
                        .HasColumnType("int");

                    b.Property<int?>("MaxDuration")
                        .HasColumnType("int");

                    b.Property<int?>("MinBreak")
                        .HasColumnType("int");

                    b.Property<int?>("MinDuration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP");

                    b.HasKey("FocusMethodId")
                        .HasName("PRIMARY");

                    b.ToTable("FocusMethod");
                });

            modelBuilder.Entity("ZenGarden.Domain.Entities.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ItemID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ItemId"));

                    b.Property<decimal?>("Cost")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Rarity")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime>("UpdatedAt"));

                    b.HasKey("ItemId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Type", "Rarity" }, "idx_item_type_rarity");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("ZenGarden.Domain.Entities.ItemDetail", b =>
                {
                    b.Property<int>("ItemDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ItemDetailID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ItemDetailId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Duration")
                        .HasColumnType("text");

                    b.Property<string>("Effect")
                        .HasColumnType("json");

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("ItemID");

                    b.Property<string>("MediaUrl")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Saled")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP");

                    b.HasKey("ItemDetailId")
                        .HasName("PRIMARY");

                    b.HasIndex("ItemId")
                        .IsUnique();

                    b.ToTable("ItemDetail");
                });

            modelBuilder.Entity("ZenGarden.Domain.Entities.Packages", b =>
                {
                    b.Property<int>("PackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PackageID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PackageId"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP");

                    b.HasKey("PackageId")
                        .HasName("PRIMARY");

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("ZenGarden.Domain.Entities.PurchaseHistory", b =>
                {
                    b.Property<int>("PurchaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PurchaseID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PurchaseId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("ItemID");

                    b.Property<int>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("PurchaseId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ItemId" }, "ItemID2");

                    b.HasIndex(new[] { "UserId" }, "UserID2");

                    b.ToTable("PurchaseHistory");
                });

            modelBuilder.Entity("ZenGarden.Domain.Entities.Roles", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("RoleId")
                        .HasName("PRIMARY");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("ZenGarden.Domain.Entities.TaskType", b =>
                {
                    b.Property<int>("TaskTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TaskTypeID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TaskTypeId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("TaskTypeDescription")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TaskTypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP");

                    b.HasKey("TaskTypeId")
                        .HasName("PRIMARY");

                    b.ToTable("TaskType");
                });

            modelBuilder.Entity("ZenGarden.Domain.Entities.Tasks", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TaskID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TaskId"));

                    b.Property<int>("BreakTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(5);

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("Duration");

                    b.Property<int?>("FocusMethodId")
                        .HasColumnType("int")
                        .HasColumnName("FocusMethodID");

                    b.Property<bool>("IsSuggested")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TaskDescription")
                        .HasColumnType("text");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("TaskTypeId")
                        .HasColumnType("int")
                        .HasColumnName("TaskTypeID");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP");

                    b.Property<int?>("UserTreeId")
                        .HasColumnType("int")
                        .HasColumnName("UserTreeID");

                    b.HasKey("TaskId")
                        .HasName("PRIMARY");

                    b.HasIndex("FocusMethodId");

                    b.HasIndex("TaskTypeId");

                    b.HasIndex("UserTreeId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("ZenGarden.Domain.Entities.TradeHistory", b =>
                {
                    b.Property<int>("TradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TradeID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TradeId"));

                    b.Property<DateTime?>("CompletedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("RequestedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal?>("TradeFee")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValueSql("'0.00'");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserAid")
                        .HasColumnType("int")
                        .HasColumnName("UserAID");

                    b.Property<int?>("UserBid")
                        .HasColumnType("int")
                        .HasColumnName("UserBID");

                    b.Property<int?>("UserTreeAid")
                        .HasColumnType("int")
                        .HasColumnName("UserTreeAID");

                    b.Property<int?>("UserTreeBid")
                        .HasColumnType("int")
                        .HasColumnName("UserTreeBID");

                    b.HasKey("TradeId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserBid" }, "UserBID");

                    b.HasIndex(new[] { "UserTreeAid" }, "UserTreeAID");

                    b.HasIndex(new[] { "UserTreeBid" }, "UserTreeBID");

                    b.HasIndex(new[] { "UserAid", "UserBid" }, "idx_tradehistory_user");

                    b.ToTable("TradeHistory");
                });

            modelBuilder.Entity("ZenGarden.Domain.Entities.Transactions", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TransactionID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<decimal?>("Amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("PackageId")
                        .HasColumnType("int")
                        .HasColumnName("PackageID");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TransactionRef")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("TransactionTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<int?>("WalletId")
                        .HasColumnType("int")
                        .HasColumnName("WalletID");

                    b.HasKey("TransactionId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PackageId" }, "idx_transaction_package");

                    b.HasIndex(new[] { "UserId" }, "idx_transaction_user");

                    b.HasIndex(new[] { "WalletId" }, "idx_transaction_wallet");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("ZenGarden.Domain.Entities.Tree", b =>
                {
                    b.Property<int>("TreeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TreeID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("TreeId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Name");

                    b.Property<string>("Rarity")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Rarity");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP");

                    b.HasKey("TreeId")
                        .HasName("PRIMARY");

                    b.ToTable("Tree");
                });

            modelBuilder.Entity("ZenGarden.Domain.Entities.TreeXpConfig", b =>
                {
                    b.Property<int>("LevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LevelID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("LevelId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP");

                    b.Property<int>("XpThreshold")
                        .HasColumnType("int")
                        .HasColumnName("XpThreshold");

                    b.HasKey("LevelId")
                        .HasName("PRIMARY");

                    b.ToTable("TreeXpConfig");
                });

            modelBuilder.Entity("ZenGarden.Domain.Entities.TreeXpLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LogID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("LogId"));

                    b.Property<int>("ActivityType")
                        .HasColumnType("int")
                        .HasColumnName("ActivityType");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("TaskId")
                        .HasColumnType("int")
                        .HasColumnName("TaskID");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP");

                    b.Property<int>("XpAmount")
                        .HasColumnType("int")
                        .HasColumnName("XpAmount");

                    b.HasKey("LogId")
                        .HasName("PRIMARY");

                    b.HasIndex("TaskId");

                    b.ToTable("TreeXpLog");
                });

            modelBuilder.Entity("ZenGarden.Domain.Entities.UserChallenge", b =>
                {
                    b.Property<int>("UserChallengeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserChallengeID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserChallengeId"));

                    b.Property<int>("ChallengeId")
                        .HasColumnType("int")
                        .HasColumnName("ChallengeID");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("JoinedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Progress")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("Status");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("UserChallengeId")
                        .HasName("PRIMARY");

                    b.HasIndex("ChallengeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserChallenges");
                });

            modelBuilder.Entity("ZenGarden.Domain.Entities.UserConfig", b =>
                {
                    b.Property<int>("UserConfigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserConfigID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserConfigId"));

                    b.Property<string>("BackgroundConfig")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("BackgroundConfig");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("SoundConfig")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("SoundConfig");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("UserConfigId")
                        .HasName("PRIMARY");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserConfig");
                });

            modelBuilder.Entity("ZenGarden.Domain.Entities.UserExperience", b =>
                {
                    b.Property<int>("UserExperienceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserExperienceID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserExperienceId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CurrentLevel")
                        .HasColumnType("int");

                    b.Property<int>("LevelId")
                        .HasColumnType("int");

                    b.Property<long>("TotalXp")
                        .HasColumnType("bigint")
                        .HasColumnName("TotalXP");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<int>("XpToNextLevel")
                        .HasColumnType("int");

                    b.HasKey("UserExperienceId")
                        .HasName("PRIMARY");

                    b.HasIndex("LevelId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserExperience");
                });

            modelBuilder.Entity("ZenGarden.Domain.Entities.UserTree", b =>
                {
                    b.Property<int>("UserTreeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserTreeID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserTreeId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("FinalTreeId")
                        .HasColumnType("int")
                        .HasColumnName("FinalTreeID");

                    b.Property<ulong>("IsMaxLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(0ul);

                    b.Property<int>("LevelId")
                        .HasColumnType("int")
                        .HasColumnName("LevelID");

                    b.Property<int>("TotalXp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("TreeStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime>("UpdatedAt"));

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("UserTreeId")
                        .HasName("PRIMARY");

                    b.HasIndex("FinalTreeId");

                    b.HasIndex("LevelId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTree");
                });

            modelBuilder.Entity("ZenGarden.Domain.Entities.UserXpConfig", b =>
                {
                    b.Property<int>("LevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LevelID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("LevelId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP");

                    b.Property<int>("XpThreshold")
                        .HasColumnType("int")
                        .HasColumnName("XpThreshold");

                    b.HasKey("LevelId")
                        .HasName("PRIMARY");

                    b.ToTable("UserXpConfig");
                });

            modelBuilder.Entity("ZenGarden.Domain.Entities.UserXpLog", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("LogId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("XpAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("XpAmount");

                    b.Property<int>("XpSource")
                        .HasColumnType("int")
                        .HasColumnName("XpSource");

                    b.HasKey("LogId")
                        .HasName("PRIMARY");

                    b.HasIndex("UserId");

                    b.ToTable("UserXpLog");
                });

            modelBuilder.Entity("ZenGarden.Domain.Entities.Users", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("OtpCodeHash")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("OtpExpiry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("RefreshTokenExpiry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("RefreshTokenHash")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("UserId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Email" }, "Email")
                        .IsUnique();

                    b.HasIndex(new[] { "RoleId" }, "RoleID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ZenGarden.Domain.Entities.Wallet", b =>
                {
                    b.Property<int>("WalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("WalletID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("WalletId"));

                    b.Property<decimal?>("Balance")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasDefaultValueSql("'0.00'");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Currency")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastTransactionAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("WalletId")
                        .HasName("PRIMARY");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Wallet");
                });

            modelBuilder.Entity("ZenGarden.Domain.Entities.XPConfig", b =>
                {
                    b.Property<int>("XPConfigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("XPConfigID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("XPConfigId"));

                    b.Property<double>("BaseXP")
                        .HasColumnType("double");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("FocusMethodId")
                        .HasColumnType("int")
                        .HasColumnName("FocusMethodID");

                    b.Property<double>("Multiplier")
                        .HasColumnType("double");

                    b.Property<int>("TaskTypeId")
                        .HasColumnType("int")
                        .HasColumnName("TaskTypeID");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP");

                    MySqlPropertyBuilderExtensions.UseMySqlComputedColumn(b.Property<DateTime>("UpdatedAt"));

                    b.HasKey("XPConfigId")
                        .HasName("PRIMARY");

                    b.HasIndex("FocusMethodId");

                    b.HasIndex("TaskTypeId");

                    b.ToTable("XpConfigs");
                });

            modelBuilder.Entity("ZenGarden.Domain.Entities.Bag", b =>
                {
                    b.HasOne("ZenGarden.Domain.Entities.Users", "User")
                        .WithOne("Bag")
                        .HasForeignKey("ZenGarden.Domain.Entities.Bag", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZenGarden.Domain.Entities.BagItem", b =>
                {
                    b.HasOne("ZenGarden.Domain.Entities.Bag", "Bag")
                        .WithMany("BagItem")
                        .HasForeignKey("BagId")
                        .HasConstraintName("bagitem_ibfk_1");

                    b.HasOne("ZenGarden.Domain.Entities.Item", "Item")
                        .WithMany("BagItem")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("bagitem_ibfk_2");

                    b.Navigation("Bag");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("ZenGarden.Domain.Entities.Challenge", b =>
                {
                    b.HasOne("ZenGarden.Domain.Entities.ChallengeType", "ChallengeType")
                        .WithMany("Challenges")
                        .HasForeignKey("ChallengeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("challenge_ibfk_1");

                    b.Navigation("ChallengeType");
                });

            modelBuilder.Entity("ZenGarden.Domain.Entities.ChallengeTask", b =>
                {
                    b.HasOne("ZenGarden.Domain.Entities.Challenge", "Challenge")
                        .WithMany("ChallengeTasks")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("challengetask_ibfk_1");

                    b.HasOne("ZenGarden.Domain.Entities.Tasks", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Challenge");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("ZenGarden.Domain.Entities.ItemDetail", b =>
                {
                    b.HasOne("ZenGarden.Domain.Entities.Item", "Item")
                        .WithOne("ItemDetail")
                        .HasForeignKey("ZenGarden.Domain.Entities.ItemDetail", "ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("ZenGarden.Domain.Entities.PurchaseHistory", b =>
                {
                    b.HasOne("ZenGarden.Domain.Entities.Item", "Item")
                        .WithMany("PurchaseHistory")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("purchasehistory_ibfk_2");

                    b.HasOne("ZenGarden.Domain.Entities.Users", "User")
                        .WithMany("PurchaseHistory")
                        .HasForeignKey("UserId")
                        .HasConstraintName("purchasehistory_ibfk_1");

                    b.Navigation("Item");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZenGarden.Domain.Entities.Tasks", b =>
                {
                    b.HasOne("ZenGarden.Domain.Entities.FocusMethod", "FocusMethod")
                        .WithMany("Tasks")
                        .HasForeignKey("FocusMethodId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ZenGarden.Domain.Entities.TaskType", "TaskType")
                        .WithMany("Tasks")
                        .HasForeignKey("TaskTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZenGarden.Domain.Entities.UserTree", "UserTree")
                        .WithMany("Tasks")
                        .HasForeignKey("UserTreeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("FocusMethod");

                    b.Navigation("TaskType");

                    b.Navigation("UserTree");
                });

            modelBuilder.Entity("ZenGarden.Domain.Entities.TradeHistory", b =>
                {
                    b.HasOne("ZenGarden.Domain.Entities.Users", "UserA")
                        .WithMany("TradeHistoryUserA")
                        .HasForeignKey("UserAid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ZenGarden.Domain.Entities.Users", "UserB")
                        .WithMany("TradeHistoryUserB")
                        .HasForeignKey("UserBid")
                        .HasConstraintName("tradehistory_ibfk_2");

                    b.HasOne("ZenGarden.Domain.Entities.UserTree", "UserTreeA")
                        .WithMany("TradeHistoryUserTreeA")
                        .HasForeignKey("UserTreeAid")
                        .HasConstraintName("tradehistory_ibfk_3");

                    b.HasOne("ZenGarden.Domain.Entities.UserTree", "UserTreeB")
                        .WithMany("TradeHistoryUserTreeB")
                        .HasForeignKey("UserTreeBid")
                        .HasConstraintName("tradehistory_ibfk_4");

                    b.Navigation("UserA");

                    b.Navigation("UserB");

                    b.Navigation("UserTreeA");

                    b.Navigation("UserTreeB");
                });

            modelBuilder.Entity("ZenGarden.Domain.Entities.Transactions", b =>
                {
                    b.HasOne("ZenGarden.Domain.Entities.Packages", "Package")
                        .WithMany()
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("transactions_ibfk_3");

                    b.HasOne("ZenGarden.Domain.Entities.Users", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .HasConstraintName("transactions_ibfk_1");

                    b.HasOne("ZenGarden.Domain.Entities.Wallet", "Wallet")
                        .WithMany("Transactions")
                        .HasForeignKey("WalletId")
                        .HasConstraintName("transactions_ibfk_2");

                    b.Navigation("Package");

                    b.Navigation("User");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("ZenGarden.Domain.Entities.TreeXpLog", b =>
                {
                    b.HasOne("ZenGarden.Domain.Entities.Tasks", "Tasks")
                        .WithMany("TreeXpLog")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("ZenGarden.Domain.Entities.UserChallenge", b =>
                {
                    b.HasOne("ZenGarden.Domain.Entities.Challenge", "Challenge")
                        .WithMany("UserChallenges")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZenGarden.Domain.Entities.Users", "User")
                        .WithMany("UserChallenges")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Challenge");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZenGarden.Domain.Entities.UserConfig", b =>
                {
                    b.HasOne("ZenGarden.Domain.Entities.Users", "User")
                        .WithOne("UserConfig")
                        .HasForeignKey("ZenGarden.Domain.Entities.UserConfig", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZenGarden.Domain.Entities.UserExperience", b =>
                {
                    b.HasOne("ZenGarden.Domain.Entities.UserXpConfig", "UserXpConfig")
                        .WithMany("UserExperiences")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ZenGarden.Domain.Entities.Users", "User")
                        .WithOne("UserExperience")
                        .HasForeignKey("ZenGarden.Domain.Entities.UserExperience", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("UserXpConfig");
                });

            modelBuilder.Entity("ZenGarden.Domain.Entities.UserTree", b =>
                {
                    b.HasOne("ZenGarden.Domain.Entities.Tree", "FinalTree")
                        .WithMany("UserTree")
                        .HasForeignKey("FinalTreeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("usertree_ibfk_2");

                    b.HasOne("ZenGarden.Domain.Entities.TreeXpConfig", "TreeXpConfig")
                        .WithMany("UserTrees")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ZenGarden.Domain.Entities.Users", "User")
                        .WithMany("UserTree")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("usertree_ibfk_1");

                    b.Navigation("FinalTree");

                    b.Navigation("TreeXpConfig");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZenGarden.Domain.Entities.UserXpLog", b =>
                {
                    b.HasOne("ZenGarden.Domain.Entities.Users", "User")
                        .WithMany("UserXpLog")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZenGarden.Domain.Entities.Users", b =>
                {
                    b.HasOne("ZenGarden.Domain.Entities.Roles", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("users_ibfk_1");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ZenGarden.Domain.Entities.Wallet", b =>
                {
                    b.HasOne("ZenGarden.Domain.Entities.Users", "User")
                        .WithOne("Wallet")
                        .HasForeignKey("ZenGarden.Domain.Entities.Wallet", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZenGarden.Domain.Entities.XPConfig", b =>
                {
                    b.HasOne("ZenGarden.Domain.Entities.FocusMethod", "FocusMethod")
                        .WithMany("XPConfigs")
                        .HasForeignKey("FocusMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZenGarden.Domain.Entities.TaskType", "TaskType")
                        .WithMany("XPConfigs")
                        .HasForeignKey("TaskTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FocusMethod");

                    b.Navigation("TaskType");
                });

            modelBuilder.Entity("ZenGarden.Domain.Entities.Bag", b =>
                {
                    b.Navigation("BagItem");
                });

            modelBuilder.Entity("ZenGarden.Domain.Entities.Challenge", b =>
                {
                    b.Navigation("ChallengeTasks");

                    b.Navigation("UserChallenges");
                });

            modelBuilder.Entity("ZenGarden.Domain.Entities.ChallengeType", b =>
                {
                    b.Navigation("Challenges");
                });

            modelBuilder.Entity("ZenGarden.Domain.Entities.FocusMethod", b =>
                {
                    b.Navigation("Tasks");

                    b.Navigation("XPConfigs");
                });

            modelBuilder.Entity("ZenGarden.Domain.Entities.Item", b =>
                {
                    b.Navigation("BagItem");

                    b.Navigation("ItemDetail");

                    b.Navigation("PurchaseHistory");
                });

            modelBuilder.Entity("ZenGarden.Domain.Entities.Roles", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ZenGarden.Domain.Entities.TaskType", b =>
                {
                    b.Navigation("Tasks");

                    b.Navigation("XPConfigs");
                });

            modelBuilder.Entity("ZenGarden.Domain.Entities.Tasks", b =>
                {
                    b.Navigation("TreeXpLog");
                });

            modelBuilder.Entity("ZenGarden.Domain.Entities.Tree", b =>
                {
                    b.Navigation("UserTree");
                });

            modelBuilder.Entity("ZenGarden.Domain.Entities.TreeXpConfig", b =>
                {
                    b.Navigation("UserTrees");
                });

            modelBuilder.Entity("ZenGarden.Domain.Entities.UserTree", b =>
                {
                    b.Navigation("Tasks");

                    b.Navigation("TradeHistoryUserTreeA");

                    b.Navigation("TradeHistoryUserTreeB");
                });

            modelBuilder.Entity("ZenGarden.Domain.Entities.UserXpConfig", b =>
                {
                    b.Navigation("UserExperiences");
                });

            modelBuilder.Entity("ZenGarden.Domain.Entities.Users", b =>
                {
                    b.Navigation("Bag");

                    b.Navigation("PurchaseHistory");

                    b.Navigation("TradeHistoryUserA");

                    b.Navigation("TradeHistoryUserB");

                    b.Navigation("Transactions");

                    b.Navigation("UserChallenges");

                    b.Navigation("UserConfig");

                    b.Navigation("UserExperience");

                    b.Navigation("UserTree");

                    b.Navigation("UserXpLog");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("ZenGarden.Domain.Entities.Wallet", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
